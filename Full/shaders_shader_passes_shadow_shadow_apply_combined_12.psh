; compiled from tags\rasterizer\pixel_shaders_dx9\shaders_shader_passes_shadow_shadow_apply_combined_1.txt
;
#const C2.a = $shadow_fade

DX11_sampler2D(0);
DX11_sampler2D(1);
float4 bumpenv : register(C0);    // .r=m00 .g=m01 .b=m10 .a=m11
float4 c1 : register(C1);
float4 c2 : register(C2);
float4 zwriteout : register(c16);
float4 main(
#ifdef DX11
    float4 pos_unused : SV_POSITION,
#endif
    float4 color0 : COLOR0,
    float4 color1 : COLOR1,
    float4 tc[3] : TEXCOORD0,
    float4 tc3 : TEXCOORD3,
    float4 tc4 : TEXCOORD4,
    float4 tc5 : TEXCOORD5,
    float4 tc6 : TEXCOORD6,
    float4 tc7 : TEXCOORD7
) : COLOR
{
    float4 r0 = 0;
    float2 texelSize = 1.0 / float2(1024, 1024); // Shadow map resolution

    // Base texture coordinate for shadow map sampling
    float4 baseTC = tc[0];

    // Bias term to reduce self-shadowing artifacts
    float bias = 0.00015;  // Adjust to your liking but be careful, or you'll get peter-panning

    // Poisson Disk Offsets
    float2 poissonDisk[12] = {
        float2(-0.94201624, -0.39906216),
        float2(0.94558609, -0.76890725),
        float2(-0.094184101, -0.92938870),
        float2(0.34495938, 0.29387760),
        float2(-0.91588581, 0.45771432),
        float2(-0.81544232, -0.87912464),
        float2(-0.38277543, 0.27676845),
        float2(0.97484398, 0.75648379),
        float2(0.44323325, -0.97511554),
        float2(0.53742981, -0.47373420),
        float2(-0.26496911, -0.41893023),
        float2(0.79197514, 0.19090188)
    };

    // Combined Poisson Disk Sampling and 5-tap PCF
    for (int i = -2; i <= 2; ++i)
    {
        for (int j = -2; j <= 2; ++j)
        {
            float2 pcfOffset = float2(i, j) * texelSize;
            for (int k = 0; k < 12; ++k)
            {
                float2 poissonOffset = poissonDisk[k] * texelSize;
                float2 combinedOffset = pcfOffset + poissonOffset;
                float4 newTC = baseTC;
                newTC.xy += combinedOffset;
                float depth = DX11_tex2Dproj(s0, newTC).r;

                // Magic happens here
                if ((newTC.b / newTC.a) - bias < depth)
                    r0 += 1.0f / (25.0f * 12.0f);  // Normalize by the number of samples
            }
        }
    }

    // Existing shader code for shadow fade
    r0 = c2.a * r0 + (1 - c2.a);

    // Existing shader code for fog
    float4 tex3 = DX11_tex2Dproj(s1, tc3);
    r0 *= tex3.bbbb;

    // Existing shader code for color
    if (color0.a <= 0.5) {
        r0 = 0;
    }

    return r0;
}
